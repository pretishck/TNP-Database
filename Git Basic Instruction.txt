git init						//to initialize git

****** Clone *****************
git clone [SSH-URL] [FOLDER-NAME] 	// To make a clone of the repo in your local machine
cd [FOLDER-NAME] 


************* To work branch ********************
git checkout -b [branch-name]	//To make a new branch
git checkout [branch-name] 		//To switch to an existing directory

git add .						// To add all files in the directory to staging area
git commit -m "my commit"	                	//commit files

**** Origin:main branch in github server **** master: main branch in local machine *****

*************To set target repository (Origin)***********

git remote add origin git@github.com:josexavier06/repo_name.git
git remote set-url origin git@github.com:josexavier06/repo_name.git


git pull  /***** To fetch and merge files from origin to master
git push origin master   /*** To push files from master to origin
git push -f  /* brute force*/
	
************To roll back to particular commit************
	git reset --hard <old-commit-id>	
		git push -f


/***********GIT SYNCING FORKED REPOSITORY******************
In your local clone of your forked repository, you can add the original GitHub repository as a "remote". ("Remotes" are like nicknames for the URLs of repositories - origin is one, for example.) Then you can fetch all the branches from that upstream repository, and rebase your work to continue working on the upstream version. In terms of commands that might look like:

# Add the remote, call it "upstream":

git remote add upstream https://github.com/whoever/whatever.git

# Fetch all the branches of that remote into remote-tracking branches,
# such as upstream/master:

git fetch upstream

# Make sure that you're on your master branch:

git checkout master

# Rewrite your master branch so that any commits of yours that
# aren't already in upstream/master are replayed on top of that
# other branch:

git rebase upstream/master
If you don't want to rewrite the history of your master branch, (for example because other people may have cloned it) then you should replace the last command with git merge upstream/master. However, for making further pull requests that are as clean as possible, it's probably better to rebase.

Update: If you've rebased your branch onto upstream/master you may need to force the push in order to push it to your own forked repository on GitHub. You'd do that with:

git push -f origin master
You only need to use the -f the first time after you've rebased.
